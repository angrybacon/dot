#+TITLE: Qtile
#+AUTHOR: Mathieu Marques
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:python :tangle ~/.config/qtile/config.py

* Installation

If missing, create a desktop entry under =/usr/share/xsessions/= in order to
select Qtile as your preferred option from the login manager.

#+BEGIN_SRC conf
[Desktop Entry]
Name=Qtile
Comment=Qtile Session
Exec=qtile start
Type=Application
Keywords=wm;tiling
#+END_SRC

Install =mypy= and run =qtile check= in order to verify that your configuration
can be loaded safely. In addition, some widgets may depend on =psutil=.

In case of failure to reload the configuration through the predefined key
binding, Qtile can be reloaded from the command line directly.

#+BEGIN_SRC sh :results silent
qtile cmd-obj -o cmd -f reload_config
#+END_SRC

* Bootstrap

#+BEGIN_SRC python
import os
import subprocess
from libqtile import bar, layout, widget
from libqtile.command import lazy
from libqtile.config import (
    Click, Drag, DropDown, Group, Key, Match, Screen, ScratchPad,
)


mod = 'mod4'
control = 'control'
shift = 'shift'
home = os.path.expanduser('~')
#+END_SRC

Application commands.

#+BEGIN_SRC python
file_manager = 'thunar'
terminal = 'kitty'
#+END_SRC

Variables used in the =CheckUpdates= widget.

#+BEGIN_SRC python
update_command = terminal + ' yay -Syu'
update_distribution = 'Arch_checkupdates'
#+END_SRC

Commands for media keys.

#+BEGIN_SRC python
player_next = 'playerctl next'
player_previous = 'playerctl previous'
player_toggle = 'playerctl play-pause'
volume_down = 'pulsemixer --change-volume -5 --unmute'
volume_toggle = 'pulsemixer  --toggle-mute'
volume_up = 'pulsemixer --change-volume +5 --unmute'
#+END_SRC

* Keys

#+BEGIN_SRC python
keys = [
    # Meta
    Key([mod], 'space', lazy.spawncmd()),
    Key([mod], 'q', lazy.window.kill()),
    Key([mod, control], 'Return', lazy.spawn(terminal)),
    Key([mod, control], 'q', lazy.shutdown()),
    Key([mod, control], 'r', lazy.reload_config()),
    # Layout
    Key([mod], 'Down', lazy.layout.down()),
    Key([mod], 'Left', lazy.layout.left()),
    Key([mod], 'Right', lazy.layout.right()),
    Key([mod], 'Up', lazy.layout.up()),
    Key([mod], 'e', lazy.spawn(file_manager)),
    Key([mod], 'f', lazy.window.toggle_fullscreen()),
    Key([mod], 'n', lazy.layout.next()),
    Key([mod], 'p', lazy.layout.previous()),
    Key([mod, control], 'Tab', lazy.next_layout()),
    Key([mod, control], 'h', lazy.layout.shrink_main()),
    Key([mod, control], 'j', lazy.layout.grow()),
    Key([mod, control], 'k', lazy.layout.shrink()),
    Key([mod, control], 'l', lazy.layout.grow_main()),
    Key([mod, control], 'n', lazy.layout.reset()),
    Key([mod, shift], 'f', lazy.layout.flip()),
    Key([mod, shift], 'h', lazy.layout.shuffle_left()),
    Key([mod, shift], 'j', lazy.layout.shuffle_down()),
    Key([mod, shift], 'k', lazy.layout.shuffle_up()),
    Key([mod, shift], 'l', lazy.layout.shuffle_right()),
    # Media
    Key([], 'XF86AudioLowerVolume', lazy.spawn(volume_down)),
    Key([], 'XF86AudioMute', lazy.spawn(volume_toggle)),
    Key([], 'XF86AudioNext', lazy.spawn(player_next)),
    Key([], 'XF86AudioPlay', lazy.spawn(player_toggle)),
    Key([], 'XF86AudioPrev', lazy.spawn(player_previous)),
    Key([], 'XF86AudioRaiseVolume', lazy.spawn(volume_up)),
    # Screenshot
    Key([mod, shift], '3', lazy.spawn(['flameshot', 'gui'])),
    Key([mod, shift], '4', lazy.spawn(['flameshot', 'screen'])),
    Key([mod, shift, control], '4', lazy.spawn(['flameshot', 'screen', '-c'])),
]
#+END_SRC

* Groups

Install Google's Material Design icon font. See https://fonts.google.com/icons
for the glyph code points to use.

#+BEGIN_SRC python
klasses = {
    'game': ['battle.net.exe', 'lutris', 'steam', 'steamwebhelper'],
    'music': ['spotify'],
    'social': ['discord', 'slack'],
    'web': ['brave', 'brave-browser', 'firefox', 'google-chrome'],
}

groups_game = [Match(wm_class=klass) for klass in klasses['game']]
groups_music = [Match(wm_class=klass) for klass in klasses['music']]
groups_social = [Match(wm_class=klass) for klass in klasses['social']]
groups_web = [Match(wm_class=klass) for klass in klasses['web']]

groups = [
    Group('1', label='\U0000EF4A', matches=groups_web),
    Group('2', label='\U0000EF4A', matches=groups_social),
    Group('3', label='\U0000EF4A', matches=groups_game),
    Group('4', label='\U0000EF4A'),
    Group('5', label='\U0000EF4A'),
    Group('6', label='\U0000EF4A'),
    Group('7', label='\U0000EF4A'),
    Group('8', label='\U0000EF4A'),
    Group('9', label='\U0000EF4A', matches=groups_music),
    Group('0', label='\U0000EF4A'),
]

for g in groups:
    keys.extend([
        Key([mod], g.name, lazy.group[g.name].toscreen(toggle=True)),
        Key([mod, control], g.name, lazy.window.togroup(g.name)),
    ])
#+END_SRC

* Scratchpad

Define a scratchpad slot with a dedicated terminal.

#+BEGIN_SRC python
scratchpad_geometry = {'height': .8, 'width': .6, 'x': .2, 'y': .1}
scratchpad_dropdown = DropDown('terminal', terminal, **scratchpad_geometry)
groups.append(ScratchPad('scratchpad', [scratchpad_dropdown]))
#+END_SRC

Bind the dropdown key.

#+BEGIN_SRC python
scratchpad = lazy.group['scratchpad']
keys.append(Key([mod], 'Return', scratchpad.dropdown_toggle('terminal')))
#+END_SRC

* Layouts

#+BEGIN_SRC python
layouts_theme = {
    'border_focus': '#656555',
    'border_normal': '#5F5F5F',
    'border_width': 1,
    'margin': 36,
    'single_border_width': 1,
}

layouts = [
    layout.MonadTall(**layouts_theme, ratio=.65),
    layout.MonadWide(**layouts_theme, ratio=.6),
]

auto_fullscreen = True
auto_minimize = True
focus_on_window_activation = 'smart'
reconfigure_screens = True
wmname = 'LG3D'
#+END_SRC

#+BEGIN_SRC python
floating_layout = layout.Floating(
    **layouts_theme,
    float_rules=[
        *layout.Floating.default_float_rules,
        # NOTE Use `xprop` to guess the application attributes
        Match(title='branchdialog'),
        Match(title='pinentry'),
        Match(wm_class='confirmreset'),
        Match(wm_class='makebranch'),
        Match(wm_class='maketag'),
        Match(wm_class='pinentry-gtk-2'),
        Match(wm_class='ssh-askpass'),
    ],
)
#+END_SRC

* Bar

#+BEGIN_SRC python
def widgets_list():
    colors = {
        'accent': '#93E0E3',
        'chart': '#7F9F7F',
        'foreground': '#DCDCCC',
        'muted': '#656566',
    }
    chart = {
        'border_width': 0,
        'fill_color': colors['chart'],
        'frequency': .5,
        'graph_color': colors['chart'],
        'margin_x': 0,
        'margin_y': 8,
        'padding': 8,
        'type': 'box',
    }
    font_size = 20
    return [
        widget.Spacer(length=8),
        widget.GroupBox(
            active=colors['foreground'],
            borderwidth=0,
            disable_drag=True,
            font='Material Design Icons',
            fontsize=24,
            highlight_method='text',
            inactive=colors['muted'],
            this_current_screen_border=colors['accent'],
        ),
        widget.Spacer(length=16),
        widget.Prompt(
            cursorblink=.2,
            font='monospace',
            fontsize=font_size,
            ignore_dups_history=True,
            prompt='Spawn: ',
        ),
        widget.Spacer(),
        widget.Clock(
            fontsize=font_size,
            foreground=colors['foreground'],
            format='%H:%M %B %d',
        ),
        widget.Spacer(),
        widget.CheckUpdates(
            display_format='{updates} updates',
            distro=update_distribution,
            execute=update_command,
            fontsize=font_size,
            mouse_callbacks={'Button3': scratchpad.dropdown_toggle('terminal')},
            update_interval=60 * 60,
        ),
        widget.Spacer(length=16),
        widget.Systray(padding=0),
        widget.Spacer(length=16),
        widget.Volume(
            fontsize=font_size,
            foreground=colors['foreground'],
            mouse_callbacks={'Button3': lazy.spawn('blueman-manager')},
            volume_down_command=volume_down,
            volume_up_command=volume_up,
        ),
        widget.Spacer(length=16),
        widget.CPUGraph(**chart),
        widget.Spacer(length=16),
        widget.MemoryGraph(**chart),
        widget.Spacer(length=16),
        widget.NetGraph(**chart),
        widget.Spacer(length=16),
    ]

screens_bar = bar.Bar(background='#49494940', size=48, widgets=widgets_list())
screens = [Screen(top=screens_bar)]
#+END_SRC

* Mouse

#+BEGIN_SRC python
mouse = [
    Drag(
        [mod],
        'Button1',
        lazy.window.set_position_floating(),
        start=lazy.window.get_position(),
    ),
    Drag(
        [mod],
        'Button3',
        lazy.window.set_size_floating(),
        start=lazy.window.get_size(),
    ),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
#+END_SRC

* COMMENT Local Variables

# Local Variables:
# after-save-hook: (org-babel-tangle t)
# eval: (when (require 'rainbow-mode nil :noerror) (rainbow-mode 1))
# End:
