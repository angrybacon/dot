# -*- after-save-hook: (org-babel-tangle t); -*-
#+TITLE: QTile
#+AUTHOR: Mathieu Marques
#+PROPERTY: header-args:python :tangle ~/.config/qtile/config.py

* Disclaimer

Menus on Chromium-based browsers are broken when used in non-fullscreen layouts.
Disable blur events as a temporary fix. See
https://github.com/qtile/qtile/issues/2404.

=/usr/share/applications/brave-browser.desktop=

#+BEGIN_SRC diff
 TryExec=brave
-Exec=brave %U
+Exec=brave %U --disable-features=SendMouseLeaveEvents
#+END_SRC

* Installation

#+BEGIN_SRC sh
paru -S \
    python-psutil \
    qtile \
    ttf-material-design-icons-git
#+END_SRC

* Configuration

** Bootstrap

#+BEGIN_SRC python
import os
import subprocess
from libqtile import bar, layout, widget
from libqtile.command import lazy
from libqtile.config import Drag, Group, Key, Match, Screen
from libqtile.utils import guess_terminal


mod = 'mod4'
home = os.path.expanduser('~')
terminal = guess_terminal()
#+END_SRC

** Keys

#+BEGIN_SRC python
keys = [
    # Meta
    Key([mod], 'Return', lazy.spawn(terminal)),
    Key([mod], 'space', lazy.spawncmd()),
    Key([mod], 'q', lazy.window.kill()),
    Key([mod], 'r', lazy.restart()),
    # Layout
    Key([mod], 'Tab', lazy.next_layout()),
    Key([mod], 'f', lazy.window.toggle_fullscreen()),
    Key([mod], 'n', lazy.layout.normalize()),
    Key([mod, 'control'], 'h', lazy.layout.shrink()),
    Key([mod, 'control'], 'j', lazy.layout.grow_down()),
    Key([mod, 'control'], 'k', lazy.layout.grow_up()),
    Key([mod, 'control'], 'l', lazy.layout.grow()),
    Key([mod, 'shift'], 'f', lazy.layout.flip()),
    Key([mod, 'shift'], 'h', lazy.layout.shuffle_left()),
    Key([mod, 'shift'], 'j', lazy.layout.shuffle_down()),
    Key([mod, 'shift'], 'k', lazy.layout.shuffle_up()),
    Key([mod, 'shift'], 'l', lazy.layout.shuffle_right()),
    # Focus
    Key([mod], 'Up', lazy.layout.up()),
    Key([mod], 'Down', lazy.layout.down()),
    Key([mod], 'Left', lazy.layout.left()),
    Key([mod], 'Right', lazy.layout.right()),
]
#+END_SRC

** Groups

See https://materialdesignicons.com/.

#+BEGIN_SRC python
groups = [
    Group(label='\U000F0765', layout='monadtall', name='1'),
    Group(label='\U000F0765', layout='monadtall', name='2'),
    Group(label='\U000F0765', layout='monadtall', name='3'),
    Group(label='\U000F0765', layout='monadtall', name='4'),
    Group(label='\U000F0765', layout='monadtall', name='9'),
    Group(label='\U000F0765', layout='monadwide', name='0'),
]


for i in groups:
    keys.extend([
        Key([mod], i.name, lazy.group[i.name].toscreen()),
        Key([mod, 'shift'], i.name, lazy.window.togroup(i.name)),
    ])
#+END_SRC

** Layouts

#+BEGIN_SRC python
theme = {
    'border_focus': '#5E81AC',
    'border_normal': '#4C566A',
    'border_width': 2,
    'margin': 24,
}


layouts = [
    layout.MonadTall(**theme, ratio=.6),
    layout.MonadWide(**theme, ratio=.75),
]


floating_layout = layout.Floating(
    float_rules=[
        *layout.Floating.default_float_rules,
        # NOTE Run `xprop` to guess the appliation attributes
        Match(title='branchdialog'),
        Match(title='pinentry'),
        Match(wm_class='confirmreset'),
        Match(wm_class='makebranch'),
        Match(wm_class='maketag'),
        Match(wm_class='ssh-askpass'),
    ],
)


auto_fullscreen = True
focus_on_window_activation = 'smart'
wmname = 'LG3D'
#+END_SRC

** Bar

#+BEGIN_SRC python
def widget_list():
    colors = {
        'accent': '#00BFA5',
        'background': '#37474F',
        'foreground': '#ECEFF1',
        'muted': '#546E7A',
    }
    chart = {
        'background': colors['background'],
        'border_color': colors['muted'],
        'border_width': 1,
        'fill_color': colors['accent'],
        'frequency': 1,
        'graph_color': colors['accent'],
        'margin_x': 4,
        'margin_y': 8,
        'samples': 90,
        'type': 'box',
    }
    font_size = 18
    icon_size = 20
    spacer = {
        'background': colors['background'],
        'length': 8,
    }
    return [
        widget.Spacer(**spacer),
        widget.GroupBox(
            active=colors['foreground'],
            background=colors['background'],
            borderwidth=0,
            disable_drag=True,
            font='Material Design Icons',
            fontsize=icon_size,
            highlight_method='text',
            inactive=colors['muted'],
            margin=2,
            padding=4,
            this_current_screen_border=colors['accent'],
        ),
        widget.Spacer(**spacer),
        widget.Prompt(
            background=colors['background'],
            font='CodeNewRoman',
            fontsize=font_size + 2,
        ),
        widget.Spacer(background=colors['background']),
        widget.Systray(
            background=colors['background'],
            icon_size=icon_size,
            padding=12,
        ),
        widget.Spacer(**spacer),
        widget.Spacer(**spacer),
        widget.CPUGraph(**chart),
        widget.MemoryGraph(**chart),
        widget.Spacer(**spacer),
        widget.Spacer(**spacer),
        widget.Clock(
            background=colors['background'],
            fontsize=font_size,
            foreground=colors['foreground'],
            format='%d-%m %H:%M',
            padding=4,
        ),
        widget.Spacer(**spacer),
    ]


screens = [Screen(top=bar.Bar(widgets=widget_list(), size=40))]
#+END_SRC

** Mouse

#+BEGIN_SRC python
mouse = [
    Drag(
        [mod],
        'Button1',
        lazy.window.set_position_floating(),
        start=lazy.window.get_position(),
    ),
    Drag(
        [mod],
        'Button3',
        lazy.window.set_size_floating(),
        start=lazy.window.get_size(),
    )
]

dgroups_key_binder = None
dgroups_app_rules = []
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
#+END_SRC
