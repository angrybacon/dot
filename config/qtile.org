# -*- after-save-hook: (org-babel-tangle t); -*-
#+TITLE: QTile
#+AUTHOR: Mathieu Marques
#+PROPERTY: header-args:python :tangle ~/.config/qtile/config.py

* Disclaimer

Menus on Chromium-based browsers are broken when used in non-fullscreen layouts.
Disable blur events as a temporary fix. See
https://github.com/qtile/qtile/issues/2404.

=/usr/share/applications/brave-browser.desktop=

#+BEGIN_SRC diff
 TryExec=brave
-Exec=brave %U
+Exec=brave %U --disable-features=SendMouseLeaveEvents
#+END_SRC

* Installation

#+BEGIN_SRC sh
paru -S qtile
#+END_SRC

* Configuration

** Bootstrap

#+BEGIN_SRC python
import os
import subprocess
from libqtile import bar, hook, layout, widget
from libqtile.command import lazy
from libqtile.config import Drag, Group, Key, Screen


mod = 'mod4'
mod1 = 'alt'
mod2 = 'control'
home = os.path.expanduser('~')


@lazy.function
def window_to_prev_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i - 1].name)


@lazy.function
def window_to_next_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i + 1].name)
#+END_SRC

** Keys

Most of our keybindings are in sxhkd file - except these

#+BEGIN_SRC python
keys = [

    # SUPER + FUNCTION KEYS
    Key([mod], 'Return', lazy.spawn('alacritty')),
    Key([mod], 'f', lazy.window.toggle_fullscreen()),
    Key([mod], 'q', lazy.window.kill()),
    Key([mod], 'r', lazy.restart()),

    # QTILE LAYOUT KEYS
    Key([mod], 'n', lazy.layout.normalize()),

    # CHANGE FOCUS
    Key([mod], 'Up', lazy.layout.up()),
    Key([mod], 'Down', lazy.layout.down()),
    Key([mod], 'Left', lazy.layout.left()),
    Key([mod], 'Right', lazy.layout.right()),

    # RESIZE UP, DOWN, LEFT, RIGHT
    Key(
        [mod, 'control'], 'l',
        lazy.layout.grow_right(),
        lazy.layout.grow(),
        lazy.layout.increase_ratio(),
        lazy.layout.delete(),
    ),
    Key(
        [mod, 'control'], 'Right',
        lazy.layout.grow_right(),
        lazy.layout.grow(),
        lazy.layout.increase_ratio(),
        lazy.layout.delete(),
    ),
    Key(
        [mod, 'control'], 'h',
        lazy.layout.grow_left(),
        lazy.layout.shrink(),
        lazy.layout.decrease_ratio(),
        lazy.layout.add(),
    ),
    Key(
        [mod, 'control'], 'Left',
        lazy.layout.grow_left(),
        lazy.layout.shrink(),
        lazy.layout.decrease_ratio(),
        lazy.layout.add(),
    ),
    Key([mod, 'control'], 'k',
        lazy.layout.grow_up(),
        lazy.layout.grow(),
        lazy.layout.decrease_nmaster(),
        ),
    Key(
        [mod, 'control'], 'Up',
        lazy.layout.grow_up(),
        lazy.layout.grow(),
        lazy.layout.decrease_nmaster(),
    ),
    Key(
        [mod, 'control'], 'j',
        lazy.layout.grow_down(),
        lazy.layout.shrink(),
        lazy.layout.increase_nmaster(),
    ),
    Key(
        [mod, 'control'], 'Down',
        lazy.layout.grow_down(),
        lazy.layout.shrink(),
        lazy.layout.increase_nmaster(),
    ),

    # FLIP LAYOUT FOR MONADTALL/MONADWIDE
    Key([mod, 'shift'], 'f', lazy.layout.flip()),

    # FLIP LAYOUT FOR BSP
    Key([mod, 'mod1'], 'k', lazy.layout.flip_up()),
    Key([mod, 'mod1'], 'j', lazy.layout.flip_down()),
    Key([mod, 'mod1'], 'l', lazy.layout.flip_right()),
    Key([mod, 'mod1'], 'h', lazy.layout.flip_left()),

    # MOVE WINDOWS UP OR DOWN BSP LAYOUT
    Key([mod, 'shift'], 'k', lazy.layout.shuffle_up()),
    Key([mod, 'shift'], 'j', lazy.layout.shuffle_down()),
    Key([mod, 'shift'], 'h', lazy.layout.shuffle_left()),
    Key([mod, 'shift'], 'l', lazy.layout.shuffle_right()),

    # MOVE WINDOWS UP OR DOWN MONADTALL/MONADWIDE LAYOUT
    Key([mod, 'shift'], 'Up', lazy.layout.shuffle_up()),
    Key([mod, 'shift'], 'Down', lazy.layout.shuffle_down()),
    Key([mod, 'shift'], 'Left', lazy.layout.swap_left()),
    Key([mod, 'shift'], 'Right', lazy.layout.swap_right()),
]
#+END_SRC

** Groups

See https://materialdesignicons.com/.

#+BEGIN_SRC python
groups = [
    Group(label='\U000F0765', layout='monadtall', name='1'),
    Group(label='\U000F0765', layout='monadtall', name='2'),
    Group(label='\U000F0765', layout='monadtall', name='3'),
    Group(label='\U000F0765', layout='monadtall', name='4'),
    Group(label='\U000F0765', layout='monadtall', name='9'),
    Group(label='\U000F0765', layout='monadwide', name='0'),
]


for i in groups:
    keys.extend([
        Key([mod], i.name, lazy.group[i.name].toscreen()),
        Key([mod, 'shift'], i.name, lazy.window.togroup(i.name)),
    ])
#+END_SRC

** Layouts

#+BEGIN_SRC python
theme = {
    'border_focus': '#5e81ac',
    'border_normal': '#4c566a',
    'border_width': 2,
    'margin': 24,
}


layouts = [
    layout.MonadTall(**theme, ratio=.6),
    layout.MonadWide(**theme, ratio=.75),
    layout.Max(**theme),
]


keys.extend([Key([mod], 'Tab', lazy.next_layout())])


@hook.subscribe.startup_once
def start_once():
    home = os.path.expanduser('~')
    subprocess.call([home + '/.config/qtile/scripts/autostart.sh'])


@hook.subscribe.startup
def start_always():
    # Set the cursor to something sane in X
    subprocess.Popen(['xsetroot', '-cursor_name', 'left_ptr'])


@hook.subscribe.client_new
def set_floating(window):
    if (window.window.get_wm_transient_for() or window.window.get_wm_type() in floating_types):
        window.floating = True


floating_types = ['notification', 'toolbar', 'splash', 'dialog']
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(float_rules=[
    {'wmclass': 'Arcolinux-welcome-app.py'},
    {'wmclass': 'Arcolinux-tweak-tool.py'},
    {'wmclass': 'Arcolinux-calamares-tool.py'},
    {'wmclass': 'confirm'},
    {'wmclass': 'dialog'},
    {'wmclass': 'download'},
    {'wmclass': 'error'},
    {'wmclass': 'file_progress'},
    {'wmclass': 'notification'},
    {'wmclass': 'splash'},
    {'wmclass': 'toolbar'},
    {'wmclass': 'confirmreset'},
    {'wmclass': 'makebranch'},
    {'wmclass': 'maketag'},
    {'wmclass': 'Arandr'},
    {'wmclass': 'feh'},
    {'wmclass': 'Galculator'},
    {'wmclass': 'arcolinux-logout'},
    {'wmclass': 'xfce4-terminal'},
    {'wname': 'branchdialog'},
    {'wname': 'Open File'},
    {'wname': 'pinentry'},
    {'wmclass': 'ssh-askpass'},
],  fullscreen_border_width = 0, border_width = 0)
auto_fullscreen = True
focus_on_window_activation = 'focus' # or smart
wmname = 'LG3D'
#+END_SRC

** Bar

#+BEGIN_SRC python
def widget_list():

    colors = {
        'accent': '#00BFA5',
        'background': '#37474F',
        'foreground': '#ECEFF1',
        'muted': '#546E7A',
    }
    chart = {
        'background': colors['background'],
        'border_color': colors['muted'],
        'border_width': 1,
        'fill_color': colors['accent'],
        'frequency': 1,
        'graph_color': colors['accent'],
        'margin_x': 4,
        'margin_y': 8,
        'samples': 90,
        'type': 'box',
    }
    font_size = 16
    icon_size = 20
    spacer = {
        'background': colors['background'],
        'length': 8,
    }

    return [
        widget.Spacer(**spacer),
        widget.GroupBox(
            active=colors['foreground'],
            background=colors['background'],
            borderwidth=0,
            disable_drag=True,
            font='Material Design Icons',
            fontsize=icon_size,
            highlight_method='text',
            inactive=colors['muted'],
            margin=2,
            padding=4,
            this_current_screen_border=colors['accent'],
        ),
        widget.Spacer(background=colors['background']),
        widget.Systray(
            background=colors['background'],
            icon_size=icon_size,
            padding=12,
        ),
        widget.Spacer(**spacer),
        widget.Spacer(**spacer),
        widget.CPUGraph(**chart),
        widget.MemoryGraph(**chart),
        widget.Spacer(**spacer),
        widget.Spacer(**spacer),
        widget.Clock(
            background=colors['background'],
            fontsize=font_size,
            foreground=colors['foreground'],
            format='%H:%M',
            padding=4,
        ),
        widget.Spacer(**spacer),
    ]


screens = [
    Screen(top=bar.Bar(widgets=widget_list(), size=40)),
    Screen(top=bar.Bar(widgets=widget_list(), size=40)),
]
#+END_SRC

** Mouse

#+BEGIN_SRC python
mouse = [
    Drag(
        [mod],
        'Button1',
        lazy.window.set_position_floating(),
        start=lazy.window.get_position(),
    ),
    Drag(
        [mod],
        'Button3',
        lazy.window.set_size_floating(),
        start=lazy.window.get_size(),
    )
]

dgroups_key_binder = None
dgroups_app_rules = []


main = None
#+END_SRC
