# -*- after-save-hook: (org-babel-tangle t); -*-
#+TITLE: Linux
#+AUTHOR: Mathieu Marques
#+PROPERTY: header-args :results silent

This file documents the steps I've followed to install my daily machine running
Debian.

* Bootstrap

** X

=~/.profile=

Add user binaries path.

#+BEGIN_SRC sh :tangle ~/.profile
if [ -d "$HOME/.local/bin" ] ; then
  PATH="$HOME/.local/bin:$PATH"
fi
#+END_SRC

Add path for snaps.

#+BEGIN_SRC sh :tangle ~/.profile
if [ -d "/snap/bin" ] ; then
  PATH="/snap/bin:$PATH"
fi
#+END_SRC

Automatically start X.

#+BEGIN_SRC sh :tangle ~/.profile
if [ -z "${DISPLAY}" ] && [ "${XDG_VTNR}" -eq 1 ]; then
  exec startx
fi
#+END_SRC

Optionally, create a =.zprofile= link to the profile file.

#+BEGIN_SRC sh
ln -s ~/.profile ~/.zprofile
#+END_SRC

=~/.Xresources=

Increase the base DPI by 25% and set base font for XTerm.

#+BEGIN_SRC conf :tangle ~/.Xresources
Xft.dpi: 120
XTerm*faceName: monospace:style=Regular
XTerm*faceSize: 14
#+END_SRC

=~/.xinitrc=

Merge-in defaults.

#+BEGIN_SRC sh :shebang "#!/bin/sh" :tangle ~/.xinitrc
if [ -f "$HOME/.Xresources" ]; then
  xrdb -merge "$HOME/.Xresources"
fi
#+END_SRC

Bootstrap startup programs.

#+BEGIN_SRC sh :shebang "#!/bin/sh" :tangle ~/.xinitrc
xset r rate 200 50
picom &
qtile start
#+END_SRC

** Core Dependencies and Packages

#+BEGIN_SRC sh
sudo apt install git pcmanfm vim
#+END_SRC

** Snap

*** Set a Maximum of Package Revisions to Keep

#+BEGIN_SRC sh
sudo snap set system refresh.retain=2
#+END_SRC

** Visudo Settings

Run =sudo visudo= in order to customize sudoers settings.

*** Change the Default Editor

#+BEGIN_SRC diff
+Defaults editor=/usr/bin/vim
#+END_SRC

*** Enable Asterisks During Password Prompts

#+BEGIN_SRC diff
-Defaults env_reset
+Defaults env_reset, pwfeedback
#+END_SRC

* Shell

** Zsh

Install =zsh= then set it as your default shell.

#+BEGIN_SRC sh
chsh -s $(which zsh)
#+END_SRC

See [[./config/zsh.org][config/zsh.org]].

** Terminal

See [[./config/alacritty.org][config/alacritty.org]].

* Fonts

** Font Dependencies

Other sections from this document will assume these fonts are already installed:

- Cascadia Code
- Google Sans
- Roboto Slab

To manually install the fonts, download their respective TTF or OTF files and
move them to =/usr/local/share/fonts/=. Run =fc-cache= to ensure the font cache
integrity.

** Font Preferences

Set default fonts for =monospace=, =serif= and =sans-serif= classes.

#+BEGIN_SRC xml :tangle /sudo::/etc/fonts/local.conf
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fontconfig SYSTEM "urn:fontconfig:fonts.dtd">
<fontconfig>
  <match target="pattern">
    <test qual="any" name="family">
      <string>monospace</string>
    </test>
    <edit name="family" mode="assign" binding="same">
      <string>Cascadia Code</string>
    </edit>
  </match>
  <match target="pattern">
    <test qual="any" name="family">
      <string>sans-serif</string>
    </test>
    <edit name="family" mode="assign" binding="same">
      <string>Google Sans</string>
    </edit>
  </match>
  <match target="pattern">
    <test qual="any" name="family">
      <string>serif</string>
    </test>
    <edit name="family" mode="assign" binding="same">
      <string>Roboto Slab</string>
    </edit>
  </match>
</fontconfig>
#+END_SRC

* Desktop

** Compositor

See [[./config/picom.org][config/picom.org]].

** TODO Theme

*** GTK

#+BEGIN_SRC sh
paru -S lxappearance materia-gtk-theme
#+END_SRC

Enable the theme in GTK settings through =lxappearance= and verify the
configuration file =~/.config/gtk-3.0/settings.ini=.

*** Qt

#+BEGIN_SRC sh
paru -S kvantum-qt5 kvantum-theme-materia
#+END_SRC

Then run =kvantummanager= to select your theme.

** Window Manager

*** Qtile

See [[./config/qtile.org][config/qtile.org]].

*** XMonad

See [[./config/xmonad.org][config/xmonad.org]].

** TODO Notifications

See [[./config/dunst.org][config/dunst.org]].

** TODO Screenshots

#+BEGIN_SRC sh
paru -S ffcast slop xclip
#+END_SRC

Several scripts are available under [[./scripts/][scripts/]].

** Sound

Make sure that the devices are correctly selected in =pavucontrol= and that the
=pulseaudio= server is running.

#+BEGIN_SRC sh
systemctl --user status pulseaudio.service
systemctl --user status pulseaudio.socket
#+END_SRC

Use the following command to detect input sound. Requires =alsa-utils=.

#+BEGIN_SRC sh
arecord -vv -f dat /dev/null
#+END_SRC

* Emacs

Install the preferred =gccemacs=. Details at http://akrl.sdf.org/gccemacs.html.
CMake is necessary in order to compile the dependencies to =vterm= at runtime.

See https://github.com/alexmurray/emacs-snap for the Snap package.

See https://github.com/angrybacon/dotemacs for my configuration.

* Vim

Install =vim= or =gvim=. I mostly use Emacs but sometimes Vim too so very minor
tweaks are enough.

#+BEGIN_SRC sh :tangle ~/.vimrc
:syntax on
:set cursorline
#+END_SRC

* Git

** Base Configuration

=~/.gitconfig=

#+BEGIN_SRC conf :tangle ~/.gitconfig
[user]
    email = mathieumarques78@gmail.com
    name = Mathieu Marques
[core]
    excludesfile = ~/.gitignore
    ignorecase = true
[pull]
    rebase = true
[rebase]
    autosquash = true
#+END_SRC

=~/.gitignore=

#+BEGIN_SRC conf :tangle ~/.gitignore
.dir-locals.el
#+END_SRC

** TODO Signed Commits

1. First generate a key for your machine

   #+BEGIN_SRC sh
   gpg --full-gen-key
   gpg --list-secret-keys --keyid-format LONG <email>
   gpg --armor --export 1234567890ABCDEF
   #+END_SRC

2. Copy the public key to your Git hosting platform

3. Add the secret key to your repository

   #+BEGIN_SRC conf
   [user]
       signingkey = 1234567890ABCDEF
   [commit]
       gpgsign = true
   #+END_SRC

=~./profile=

#+BEGIN_SRC diff
+export GPG_TTY=$TTY
#+END_SRC

* Plex

** Dependencies

Install the server after making sure your DNS settings are correctly set.

#+BEGIN_SRC sh
sudo snap install plexmediaserver
#+END_SRC

Confirm that the server is running by visiting [[http://localhost:32400/web]].

** TODO Mounting the External Hard Drive

*** Automatically

#+BEGIN_SRC sh
paru -S udiskie udisks2
#+END_SRC

Start =udiskie= on boot in your =xinit=. It will automatically mount external
drives under =/run/media/username/=. Optionnally keep =udiskie= in the tray with
=--tray=.

*** Manually

Given an external drive named =Phoenix=, create a mount point under =/media= for
the =plex= user to access it.

#+BEGIN_SRC sh
sudo mkdir -p /media/phoenix
sudo chmod -R /media
#+END_SRC

Retrieve the UUID of the drive (with =df= and =blkid= for instance) and add the
corresponding entry at the bottom of =/etc/fstab=.

#+BEGIN_SRC diff
+UUID=1234-ABCD  /media/phoenix  exfat
#+END_SRC

Reboot and confirm that the drive is correctly mounted to the expected location.

** TODO Permissions

First verify which group you and Plex belong to.

#+BEGIN_SRC sh
groups
groups plex
#+END_SRC

Add Plex to a shared group and change the media ownership to match that group.

#+BEGIN_QUOTE
Below instructions assume a setup from =udiskie= defaults where the media is
located under =/run/media/username/=. It also assumes you assume to a =storage=
group. Adjust accordingly.
#+END_QUOTE

#+BEGIN_SRC sh
sudo usermod -a -G storage plex
sudo chown angrybacon:storage /run/media/angrybacon
sudo chmod 750 /run/media/angrybacon
sudo setfacl -m g:storage:rwx /run/media/angrybacon
#+END_SRC

Finally restart the service to apply the new permissions.

#+BEGIN_SRC sh
systemctl restart plexmediaserver.service
#+END_SRC

** TODO Start the Service Automatically on Startup

Enable the server for future sessions automatically and optionally start it now.

#+BEGIN_SRC sh
systemctl start plexmediaserver.service
systemctl enable plexmediaserver.service
#+END_SRC

Visit http://localhost:32400/web and add the media libraries.

** TODO Fix the Claim Server Prompt

This usually happens the preference files don't have the correct permission
and/or ownership.

Confirm the location of the preference files, they should be somewhere in
=/var/lib/plex/=. Then fix the ownership after having stopped the Plex server.

#+BEGIN_SRC sh
sudo chown -R plex:plex /var/lib/plex
#+END_SRC

* SSH

#+BEGIN_SRC sh
paru -S openssh xclip
ssh-keygen -t ed25519
xclip -sel clip < ~/.ssh/id_ed25519.pub
#+END_SRC

* TODO Games

** Battle.net

Battlet.net applications run best under Lutris. It has many dependencies based
on Wine. Follow the instructions at
[[https://github.com/lutris/docs/blob/master/Battle.Net.md]] and install games
from Lutris directly.

#+BEGIN_SRC sh
paru -S lutris
#+END_SRC

** Steam

For Steam games that are officially supported on Linux, install the =steam=
package after enabling =multilib= repositories in your Pacman configuration and
ensuring your graphic drivers are Vulkan-enabled.

#+BEGIN_SRC sh
paru -S steam
#+END_SRC

* TODO Pheripherals

Use your Android phone as a webcam. It is possible that =linux-headers= should
be installed manually, if so restarting might be necessary.

#+BEGIN_SRC sh
paru -S droidcam v4l2loopback-dkms linux-headers
#+END_SRC

* TODO Other Utilities

#+BEGIN_SRC sh
paru -S \
    discord_arch_electron slack-electron zoom-system-qt \
    cockatrice obs-studio spotify vlc \
    flameshot gimp \
    qbittorrent \
    btop gdu gtop htop piper most rsync tree \
    brave-bin chromium librewolf-bin
#+END_SRC
